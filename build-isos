#! /usr/bin/env perl

# Build ISO files starting last ISO file

use v5.10;
use warnings;
use strict;
use FindBin qw/$RealBin/;
use lib File::Spec->catfile($RealBin, 'lib');
use LazyScan qw/scanhome chunk_batches batch_size/;
use List::Util qw/min max sum/;
use autodie;
use File::Slurp qw/read_file write_file/;

my $options = get_options();
warn "Not yet cron-safe - need to use locks";

my $mkiso = File::Spec->catfile($RealBin, 'mkiso');

my $last_minsize = 550e6;
my $maxsize = 650e6;
my $scanhome = scanhome();
my $inbox = File::Spec->catfile($scanhome, 'inbox');
my $last_iso_path = File::Spec->catfile($scanhome, '.last-iso-batch');
my $start = $options->{start} // do {
    my @lines = read_file($last_iso_path, { chomp => 1 });
    $lines[0] + 1
};

my @chunks = chunk_batches($inbox, $maxsize, $start);

exit unless @chunks;

if (sum(map { batch_size($inbox, $_) } @{$chunks[-1]}) <= $last_minsize) {
    pop @chunks;
}

exit unless @chunks;

build_iso($_) foreach @chunks;

sub build_iso {
    my ($chunk) = @_;
    my $start = min @$chunk;
    my $end = max @$chunk;
    my $range = "$start-$end";
    my @cmd = ($mkiso, $range);
    say STDERR "@cmd" if $options->{debug};
    my $ret = system(@cmd);
    if ($ret != 0) {
        die "@cmd failed with exit status $ret\nSkipping remaining chunks\n";
    }
    write_file($last_iso_path, { atomic => 1 }, "$end\n") unless $options->{start};
}

sub get_options {
    use File::Basename qw(basename);
    use Getopt::Long;
    use Pod::Usage;

    my $prog = basename($0);  # can be used in error messages

    my $options = {
        help => 0,
        man => 0,
        start => undef,
        debug => undef,
    };

    Getopt::Long::Configure(qw{gnu_getopt});
    my $parsed_ok = GetOptions(
        'h|help'    =>  \$options->{help},
        'man'       =>  \$options->{man},
        'start|s=i' =>  \$options->{start},
        'debug'     =>  \$options->{debug},
    );

    pod2usage(-exitval => 2) unless $parsed_ok;

    # Note -output defaults to *STDOUT if -exitval is 0 or 1.
    # See the documentation for Pod::Usage under DESCRIPTION.
    pod2usage(-exitval => 1, -verbose => 1) if $options->{help};
    pod2usage(-exitval => 1, -verbose => 2) if $options->{man};

    if (defined $options->{start}) {
        pod2usage(-exitval => 2) unless $options->{start} >= 1;
    }

    return $options;
}

__END__

=head1 NAME

build-isos - BRIEF_DESCRIPTION

=head1 SYNOPSIS

build-isos [options]

 Options:
    -h, --help              brief help message
    --man                   full documentation

=head1 OPTIONS

=over 8

=item B<--help> or B<-h>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.


=back

=head1 DESCRIPTION

B<build_isos> will ...

=cut
