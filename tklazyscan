#!/usr/bin/env perl

use v5.20;
use strict;
use warnings;
use Tk;

use FindBin qw/$RealBin/;
use File::Spec::Functions qw/catfile/;
use local::lib catfile($RealBin, 'support');
use lib catfile($RealBin, 'lib');
use LazyScan qw/scanhome/;

my $mw = MainWindow->new();

my $mode = '--grey';
my $source = 'flatbed';
my @sources = (
    flatbed => 'Flatbed',
    adf => 'Feeder One Sided',
    adf_odd => 'Feeder 2-side Odd',
    adf_even => 'Feeder 2-side Even',
);

$mw->Label(-text => 'lazyscan')->pack;
$mw->Label(-text => 'Scan mode:')->pack;
$mw->Radiobutton(
    -text => $_, -value => $_,
    -variable => \$mode,
)->pack for qw/--black --grey --colour/;

$mw->Label(-text => 'Source document type:')->pack;
while (my $value = shift(@sources)) {
    my $text = shift(@sources) // break;
    $mw->Radiobutton(
        -text => $text, -value => $value,
        -variable => \$source,
    )->pack
}

$mw->Button(
    -text => 'Scan',
    -command => sub { scan() },
)->pack;
$mw->Button(
    -text => 'View Inbox in File Manager',
    -command => sub { system ($ENV{SCANFILEMAN} || 'nemo'), catfile(scanhome(), 'inbox') }
)->pack;
$mw->Button(
    -text => 'Quit',
    -command => sub { exit },
)->pack;


MainLoop;

sub scan {
    my @adfopts;
    if ($source =~ /^adf/) {
        push @adfopts, '--adf';
        push(@adfopts, '--even') if ($source eq 'adf_even');
        push(@adfopts, '--odd') if ($source eq 'adf_odd');
    }
    my @cmd = (
        qw(uxterm -e),
        File::Spec->catfile($RealBin, 'runwait'),
        File::Spec->catfile($RealBin, 'lazyscan'),
        $mode,
        @adfopts,
    );
    say "@cmd";
    unless ($ENV{FAKE}) {
        my $ret = system(@cmd);
        say "Exit code: $ret";
    }
    if ($ENV{AUTO_FLIP_EVEN_ODD}) {
        if ($source eq 'adf_even') { $source = 'adf_odd' }
        elsif ($source eq 'adf_odd') { $source = 'adf_even' }
    }
}
